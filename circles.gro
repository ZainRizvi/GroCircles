include gro

set ( "dt", 0.1 );

ahl := signal ( 1, 0.01 ); // args = diffusion rate and degradation rate
fun fdie a . 0.1 > a;
fun f1 a . 0.09 < a & a < 0.3;
fun f2 a . 0.5 < a & a < 1;
fun f3 a . 1.3 < a & a < 4;



UNDEC := 0;
LEADER := 1;
FOLLOWER := 2;


program sensor() := {

  gfp := 0.0;
  rfp := 0.0;
  yfp := 0.0;

  f1 ( get_signal ( ahl ) ) : { rfp := rfp + 1 };
  f2 ( get_signal ( ahl ) ) : { gfp := gfp + 1 };
  f3 ( get_signal ( ahl ) ) : { yfp := yfp + 1 };
  //f4 ( get_signal ( ahl ) ) : { gfp := gfp + 1; rfp := rfp + 1 };
  
  fdie ( get_signal ( ahl ) ) : { 
	die() 
  }
  
  rate ( 0.01 * rfp ) : { rfp := rfp - 1 }
  rate ( 0.01 * gfp ) : { gfp := gfp - 1 }
  rate ( 0.01 * yfp ) : { yfp := yfp - 1 }

};

program report() := {

  needs rfp;
  needs gfp;
  needs yfp;

  selected : { print ("cell ", tostring(id),
                      ": ahl=", tostring(get_signal(ahl)), 
                      ": rfp/vol=", tostring(rfp/volume),
                      ": gfp/vol=", tostring(gfp/volume),
                      ": yfp/vol=", tostring(yfp/volume)
    )
  };

};

set ( "rfp_saturation_max", 50 );
set ( "rfp_saturation_min", 0 );

ecoli ( [ x:= 0, y:= 0 ], program sensor() + report() sharing rfp, gfp, yfp );

program main() := {

  true : { set_signal ( ahl, 0, 0, 10 ) }

};
