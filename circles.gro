include gro

set ( "dt", 0.1 );
set ( "population_max", 1500);

leadSig := signal ( 1, 0.1 ); // args = diffusion rate and degradation rate
crowd := signal ( 2, 0.5);

fun f0 a . 3 > a;
fun f1 a . 1.3 < a & a < 3;
fun f2 a . 0.5 < a & a < 1;
fun f3 a . 0.09 < a & a < 0.5;
fun f4 a . 0.0 < a & a < 0.09;
fun fdie a . 0.09 > a;

fun grow a . a < 20;
fun nogrow a . a > 10;

UNDECIDED := 0;
SENDER := 1;
RECEIVER := 2;

program sensor() := {

  p := [ m := UNDECIDED ];

  gfp := 0.0;
  rfp := 0.0;
  yfp := 0.0;

  // break symmetry
  p.m = UNDECIDED & just_divided & !daughter : { 
    p.m := SENDER
  }
  
  daughter : { p.m := RECEIVER }
  
  //
  // Set the colors
  //
  
  f0 ( get_signal ( leadSig ) ) : { 
    set ( "ecoli_growth_rate", 0.1 )
  };
  f1 ( get_signal ( leadSig ) ) : { 
    rfp := rfp + 1,    
    set ( "ecoli_growth_rate", 0.05 )
  };
  f2 ( get_signal ( leadSig ) ) : { 
    gfp := gfp + 1,    
    set ( "ecoli_growth_rate", 0.03 )
   };
  f3 ( get_signal ( leadSig ) ) : { 
    yfp := yfp + 1,
    set ( "ecoli_growth_rate", 0.01 )
  };
  f4 ( get_signal ( leadSig ) ) : { 
    set ( "ecoli_growth_rate", 0.0 )
  };
  
  //
  // Should it grow?
  //
  p.m = RECEIVER & nogrow(get_signal(crowd)) : {
	set ( "ecoli_growth_rate", 0 ),
	// gfp := 100,
	// yfp := 0,
	// rfp := 100
  }
  
  p.m = SENDER : {
    emit_signal ( leadSig, 100 ),
    set ( "ecoli_growth_rate", 0 ),  
    yfp := 100
  };
  
  p.m = RECEIVER : {
    emit_signal ( crowd, 10 ),  
  }
  
  // fdie ( get_signal ( leadSig ) ) : { 
    // die() 
  // }
  
  rate ( 0.01 * rfp ) : { rfp := rfp - 1 }
  rate ( 0.01 * gfp ) : { gfp := gfp - 1 }
  rate ( 0.01 * yfp ) : { yfp := yfp - 1 }

};

program report() := {

  // needs rfp;
  // needs gfp;
  // needs yfp;
  needs p;

  selected : { print ("cell ", tostring(id),
                      ": mode=", tostring(p.m),
                      ": crowd=", tostring(get_signal(crowd))
                      // ": rfp/vol=", tostring(rfp/volume),
                      // ": gfp/vol=", tostring(gfp/volume),
                      // ": yfp/vol=", tostring(yfp/volume)
    )
  };

};

// set ( "rfp_saturation_max", 50 );
// set ( "rfp_saturation_min", 0 );

ecoli ( [ x:= 0, y:= 0 ], program sensor() + report() sharing rfp, gfp, yfp, p );

// program main() := {

  // true : { set_signal ( leadSig, 0, 0, 10 ) }

// };
